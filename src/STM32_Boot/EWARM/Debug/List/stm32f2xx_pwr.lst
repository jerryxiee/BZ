###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     04/Dec/2013  10:58:11 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\STM32F2xx_StdPeriph_Driver\src\stm32f2xx #
#                    _pwr.c                                                   #
#    Command line =  D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\STM32F2xx_StdPeriph_Driver\src\stm32f2xx #
#                    _pwr.c -D STM32F10X_CL -D USE_STDPERIPH_DRIVER -lcN      #
#                    D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\Debug\List\ -lb                    #
#                    D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\Debug\List\ -o                     #
#                    D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\Debug\Obj\ --no_cse --no_unroll    #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --warnings_are_errors --fpu=None --dlib_config        #
#                    E:\SoftwareInstall\arm\INC\c\DLib_Config_Normal.h -I     #
#                    D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\..\inc\ -I                         #
#                    D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\..\CMSIS\CM3\CoreSupport\ -I       #
#                    D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\..\STM32F2xx_StdPeriph_Driver\inc\ #
#                     -I D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\ #
#                    改进型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_13081 #
#                    5_IAR6.1\STM32_Boot\EWARM\..\CMSIS\CM3\DeviceSupport\ST\ #
#                    STM32F2xx\ -On --use_c++_inline                          #
#    List file    =  D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\Debug\List\stm32f2xx_pwr.lst       #
#    Object file  =  D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\Debug\Obj\stm32f2xx_pwr.o          #
#                                                                             #
#                                                                             #
###############################################################################

D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IAR6.1\STM32_Boot\STM32F2xx_StdPeriph_Driver\src\stm32f2xx_pwr.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f2xx_pwr.c
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    18-April-2011
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionalities of the Power Controller (PWR) peripheral:           
      9            *           - Backup Domain Access
     10            *           - PVD configuration
     11            *           - WakeUp pin configuration
     12            *           - Backup Regulator configuration
     13            *           - FLASH Power Down configuration
     14            *           - Low Power modes configuration
     15            *           - Flags management
     16            *               
     17            ******************************************************************************
     18            * @attention
     19            *
     20            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     21            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     22            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     23            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     24            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     25            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     26            *
     27            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     28            ******************************************************************************
     29            */ 
     30          
     31          /* Includes ------------------------------------------------------------------*/
     32          #include "stm32f2xx_pwr.h"
     33          #include "stm32f2xx_rcc.h"
     34          #include "assert.h"
     35          /** @addtogroup STM32F2xx_StdPeriph_Driver
     36            * @{
     37            */
     38          
     39          /** @defgroup PWR 
     40            * @brief PWR driver modules
     41            * @{
     42            */ 
     43          
     44          /* Private typedef -----------------------------------------------------------*/
     45          /* Private define ------------------------------------------------------------*/
     46          /* --------- PWR registers bit address in the alias region ---------- */
     47          #define PWR_OFFSET               (PWR_BASE - PERIPH_BASE)
     48          
     49          /* --- CR Register ---*/
     50          
     51          /* Alias word address of DBP bit */
     52          #define CR_OFFSET                (PWR_OFFSET + 0x00)
     53          #define DBP_BitNumber            0x08
     54          #define CR_DBP_BB                (PERIPH_BB_BASE + (CR_OFFSET * 32) + (DBP_BitNumber * 4))
     55          
     56          /* Alias word address of PVDE bit */
     57          #define PVDE_BitNumber           0x04
     58          #define CR_PVDE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PVDE_BitNumber * 4))
     59          
     60          /* Alias word address of FPDS bit */
     61          #define FPDS_BitNumber           0x09
     62          #define CR_FPDS_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (FPDS_BitNumber * 4))
     63          
     64          /* --- CSR Register ---*/
     65          
     66          /* Alias word address of EWUP bit */
     67          #define CSR_OFFSET               (PWR_OFFSET + 0x04)
     68          #define EWUP_BitNumber           0x08
     69          #define CSR_EWUP_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP_BitNumber * 4))
     70          
     71          /* Alias word address of BRE bit */
     72          #define BRE_BitNumber            0x09
     73          #define CSR_BRE_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (BRE_BitNumber * 4))
     74          
     75          /* ------------------ PWR registers bit mask ------------------------ */
     76          
     77          /* CR register bit mask */
     78          #define CR_DS_MASK               ((uint32_t)0xFFFFFFFC)
     79          #define CR_PLS_MASK              ((uint32_t)0xFFFFFF1F)
     80          
     81          /* Private macro -------------------------------------------------------------*/
     82          /* Private variables ---------------------------------------------------------*/
     83          /* Private function prototypes -----------------------------------------------*/
     84          /* Private functions ---------------------------------------------------------*/
     85          
     86          /** @defgroup PWR_Private_Functions
     87            * @{
     88            */
     89          
     90          /** @defgroup PWR_Group1 Backup Domain Access function 
     91           *  @brief   Backup Domain Access function  
     92           *
     93          @verbatim   
     94           ===============================================================================
     95                                      Backup Domain Access function 
     96           ===============================================================================  
     97          
     98            After reset, the backup domain (RTC registers, RTC backup data 
     99            registers and backup SRAM) is protected against possible unwanted 
    100            write accesses. 
    101            To enable access to the RTC Domain and RTC registers, proceed as follows:
    102              - Enable the Power Controller (PWR) APB1 interface clock using the
    103                RCC_APB1PeriphClockCmd() function.
    104              - Enable access to RTC domain using the PWR_BackupAccessCmd() function.
    105          
    106          @endverbatim
    107            * @{
    108            */
    109          
    110          /**
    111            * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
    112            * @param  None
    113            * @retval None
    114            */
    115          void PWR_DeInit(void)
    116          {
    117            RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
    118            RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
    119          }
    120          
    121          /**
    122            * @brief  Enables or disables access to the backup domain (RTC registers, RTC 
    123            *         backup data registers and backup SRAM).
    124            * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
    125            *         Backup Domain Access should be kept enabled.
    126            * @param  NewState: new state of the access to the backup domain.
    127            *          This parameter can be: ENABLE or DISABLE.
    128            * @retval None
    129            */
    130          void PWR_BackupAccessCmd(FunctionalState NewState)
    131          {
    132            /* Check the parameters */
    133            assert(IS_FUNCTIONAL_STATE(NewState));
    134            
    135            *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
    136          }
    137          
    138          /**
    139            * @}
    140            */
    141          
    142          /** @defgroup PWR_Group2 PVD configuration functions
    143           *  @brief   PVD configuration functions 
    144           *
    145          @verbatim   
    146           ===============================================================================
    147                                     PVD configuration functions
    148           ===============================================================================  
    149          
    150           - The PVD is used to monitor the VDD power supply by comparing it to a threshold
    151             selected by the PVD Level (PLS[2:0] bits in the PWR_CR).
    152           - A PVDO flag is available to indicate if VDD/VDDA is higher or lower than the 
    153             PVD threshold. This event is internally connected to the EXTI line16
    154             and can generate an interrupt if enabled through the EXTI registers.
    155           - The PVD is stopped in Standby mode.
    156          
    157          @endverbatim
    158            * @{
    159            */
    160          
    161          /**
    162            * @brief  Configures the voltage threshold detected by the Power Voltage Detector(PVD).
    163            * @param  PWR_PVDLevel: specifies the PVD detection level
    164            *          This parameter can be one of the following values:
    165            *            @arg PWR_PVDLevel_0: PVD detection level set to 2.0V
    166            *            @arg PWR_PVDLevel_1: PVD detection level set to 2.2V
    167            *            @arg PWR_PVDLevel_2: PVD detection level set to 2.3V
    168            *            @arg PWR_PVDLevel_3: PVD detection level set to 2.5V
    169            *            @arg PWR_PVDLevel_4: PVD detection level set to 2.7V
    170            *            @arg PWR_PVDLevel_5: PVD detection level set to 2.8V
    171            *            @arg PWR_PVDLevel_6: PVD detection level set to 2.9V
    172            *            @arg PWR_PVDLevel_7: PVD detection level set to 3.0V
    173            * @note   Refer to the electrical characteristics of you device datasheet for more details. 
    174            * @retval None
    175            */
    176          void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
    177          {
    178            uint32_t tmpreg = 0;
    179            
    180            /* Check the parameters */
    181            assert(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
    182            
    183            tmpreg = PWR->CR;
    184            
    185            /* Clear PLS[7:5] bits */
    186            tmpreg &= CR_PLS_MASK;
    187            
    188            /* Set PLS[7:5] bits according to PWR_PVDLevel value */
    189            tmpreg |= PWR_PVDLevel;
    190            
    191            /* Store the new value */
    192            PWR->CR = tmpreg;
    193          }
    194          
    195          /**
    196            * @brief  Enables or disables the Power Voltage Detector(PVD).
    197            * @param  NewState: new state of the PVD.
    198            *         This parameter can be: ENABLE or DISABLE.
    199            * @retval None
    200            */
    201          void PWR_PVDCmd(FunctionalState NewState)
    202          {
    203            /* Check the parameters */
    204            assert(IS_FUNCTIONAL_STATE(NewState));
    205            
    206            *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
    207          }
    208          
    209          /**
    210            * @}
    211            */
    212          
    213          /** @defgroup PWR_Group3 WakeUp pin configuration functions
    214           *  @brief   WakeUp pin configuration functions 
    215           *
    216          @verbatim   
    217           ===============================================================================
    218                              WakeUp pin configuration functions
    219           ===============================================================================  
    220          
    221           - WakeUp pin is used to wakeup the system from Standby mode. This pin is 
    222             forced in input pull down configuration and is active on rising edges.
    223           - There is only one WakeUp pin: WakeUp Pin 1 on PA.00.
    224          
    225          @endverbatim
    226            * @{
    227            */
    228          
    229          /**
    230            * @brief  Enables or disables the WakeUp Pin functionality.
    231            * @param  NewState: new state of the WakeUp Pin functionality.
    232            *         This parameter can be: ENABLE or DISABLE.
    233            * @retval None
    234            */
    235          void PWR_WakeUpPinCmd(FunctionalState NewState)
    236          {
    237            /* Check the parameters */  
    238            assert(IS_FUNCTIONAL_STATE(NewState));
    239          
    240            *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
    241          }
    242          
    243          /**
    244            * @}
    245            */
    246          
    247          /** @defgroup PWR_Group4 Backup Regulator configuration functions
    248           *  @brief   Backup Regulator configuration functions 
    249           *
    250          @verbatim   
    251           ===============================================================================
    252                              Backup Regulator configuration functions
    253           ===============================================================================  
    254          
    255           - The backup domain includes 4 Kbytes of backup SRAM accessible only from the 
    256             CPU, and address in 32-bit, 16-bit or 8-bit mode. Its content is retained 
    257             even in Standby or VBAT mode when the low power backup regulator is enabled. 
    258             It can be considered as an internal EEPROM when VBAT is always present.
    259             You can use the PWR_BackupRegulatorCmd() function to enable the low power
    260             backup regulator and use the PWR_GetFlagStatus(PWR_FLAG_BRR) to check if it is
    261             ready or not. 
    262          
    263           - When the backup domain is supplied by VDD (analog switch connected to VDD) 
    264             the backup SRAM is powered from VDD which replaces the VBAT power supply to 
    265             save battery life.
    266          
    267           - The backup SRAM is not mass erased by an tamper event. It is read protected 
    268             to prevent confidential data, such as cryptographic private key, from being 
    269             accessed. The backup SRAM can be erased only through the Flash interface when
    270             a protection level change from level 1 to level 0 is requested. 
    271             Refer to the description of Read protection (RDP) in the Flash programming manual.
    272          
    273          @endverbatim
    274            * @{
    275            */
    276          
    277          /**
    278            * @brief  Enables or disables the Backup Regulator.
    279            * @param  NewState: new state of the Backup Regulator.
    280            *          This parameter can be: ENABLE or DISABLE.
    281            * @retval None
    282            */
    283          void PWR_BackupRegulatorCmd(FunctionalState NewState)
    284          {
    285            /* Check the parameters */
    286            assert(IS_FUNCTIONAL_STATE(NewState));
    287          
    288            *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
    289          }
    290          
    291          /**
    292            * @}
    293            */
    294          
    295          /** @defgroup PWR_Group5 FLASH Power Down configuration functions
    296           *  @brief   FLASH Power Down configuration functions 
    297           *
    298          @verbatim   
    299           ===============================================================================
    300                               FLASH Power Down configuration functions
    301           ===============================================================================  
    302          
    303           - By setting the FPDS bit in the PWR_CR register by using the PWR_FlashPowerDownCmd()
    304             function, the Flash memory also enters power down mode when the device enters 
    305             Stop mode. When the Flash memory is in power down mode, an additional startup 
    306             delay is incurred when waking up from Stop mode.
    307          
    308          @endverbatim
    309            * @{
    310            */
    311          
    312          /**
    313            * @brief  Enables or disables the Flash Power Down in STOP mode.
    314            * @param  NewState: new state of the Flash power mode.
    315            *          This parameter can be: ENABLE or DISABLE.
    316            * @retval None
    317            */
    318          void PWR_FlashPowerDownCmd(FunctionalState NewState)
    319          {
    320            /* Check the parameters */
    321            assert(IS_FUNCTIONAL_STATE(NewState));
    322          
    323            *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
    324          }
    325          
    326          /**
    327            * @}
    328            */
    329          
    330          /** @defgroup PWR_Group6 Low Power modes configuration functions
    331           *  @brief   Low Power modes configuration functions 
    332           *
    333          @verbatim   
    334           ===============================================================================
    335                              Low Power modes configuration functions
    336           ===============================================================================  
    337          
    338            The devices feature 3 low-power modes:
    339             - Sleep mode: Cortex-M3 core stopped, peripherals kept running.
    340             - Stop mode: all clocks are stopped, regulator running, regulator in low power mode
    341             - Standby mode: 1.2V domain powered off.
    342             
    343             Sleep mode
    344             ===========
    345              - Entry:
    346                - The Sleep mode is entered by using the __WFI() or __WFE() functions.
    347              - Exit:
    348                - Any peripheral interrupt acknowledged by the nested vectored interrupt 
    349                  controller (NVIC) can wake up the device from Sleep mode.
    350          
    351             Stop mode
    352             ==========
    353             In Stop mode, all clocks in the 1.2V domain are stopped, the PLL, the HSI,
    354             and the HSE RC oscillators are disabled. Internal SRAM and register contents 
    355             are preserved.
    356             The voltage regulator can be configured either in normal or low-power mode.
    357             To minimize the consumption In Stop mode, FLASH can be powered off before 
    358             entering the Stop mode. It can be switched on again by software after exiting 
    359             the Stop mode using the PWR_FlashPowerDownCmd() function. 
    360             
    361              - Entry:
    362                - The Stop mode is entered using the PWR_EnterSTOPMode(PWR_Regulator_LowPower,) 
    363                  function with regulator in LowPower or with Regulator ON.
    364              - Exit:
    365                - Any EXTI Line (Internal or External) configured in Interrupt/Event mode.
    366                
    367             Standby mode
    368             ============
    369             The Standby mode allows to achieve the lowest power consumption. It is based 
    370             on the Cortex-M3 deepsleep mode, with the voltage regulator disabled. 
    371             The 1.2V domain is consequently powered off. The PLL, the HSI oscillator and 
    372             the HSE oscillator are also switched off. SRAM and register contents are lost 
    373             except for the RTC registers, RTC backup registers, backup SRAM and Standby 
    374             circuitry.
    375             
    376             The voltage regulator is OFF.
    377                
    378              - Entry:
    379                - The Standby mode is entered using the PWR_EnterSTANDBYMode() function.
    380              - Exit:
    381                - WKUP pin rising edge, RTC alarm (Alarm A and Alarm B), RTC wakeup,
    382                  tamper event, time-stamp event, external reset in NRST pin, IWDG reset.              
    383          
    384             Auto-wakeup (AWU) from low-power mode
    385             =====================================
    386             The MCU can be woken up from low-power mode by an RTC Alarm event, an RTC 
    387             Wakeup event, a tamper event, a time-stamp event, or a comparator event, 
    388             without depending on an external interrupt (Auto-wakeup mode).
    389          
    390             - RTC auto-wakeup (AWU) from the Stop mode
    391               ----------------------------------------
    392               
    393               - To wake up from the Stop mode with an RTC alarm event, it is necessary to:
    394                 - Configure the EXTI Line 17 to be sensitive to rising edges (Interrupt 
    395                   or Event modes) using the EXTI_Init() function.
    396                 - Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
    397                 - Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
    398                   and RTC_AlarmCmd() functions.
    399               - To wake up from the Stop mode with an RTC Tamper or time stamp event, it 
    400                 is necessary to:
    401                 - Configure the EXTI Line 21 to be sensitive to rising edges (Interrupt 
    402                   or Event modes) using the EXTI_Init() function.
    403                 - Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
    404                   function
    405                 - Configure the RTC to detect the tamper or time stamp event using the
    406                   RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
    407                   functions.
    408               - To wake up from the Stop mode with an RTC WakeUp event, it is necessary to:
    409                 - Configure the EXTI Line 22 to be sensitive to rising edges (Interrupt 
    410                   or Event modes) using the EXTI_Init() function.
    411                 - Enable the RTC WakeUp Interrupt using the RTC_ITConfig() function
    412                 - Configure the RTC to generate the RTC WakeUp event using the RTC_WakeUpClockConfig(), 
    413                   RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
    414          
    415             - RTC auto-wakeup (AWU) from the Standby mode
    416               -------------------------------------------
    417               - To wake up from the Standby mode with an RTC alarm event, it is necessary to:
    418                 - Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
    419                 - Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
    420                   and RTC_AlarmCmd() functions.
    421               - To wake up from the Standby mode with an RTC Tamper or time stamp event, it 
    422                 is necessary to:
    423                 - Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
    424                   function
    425                 - Configure the RTC to detect the tamper or time stamp event using the
    426                   RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
    427                   functions.
    428               - To wake up from the Standby mode with an RTC WakeUp event, it is necessary to:
    429                 - Enable the RTC WakeUp Interrupt using the RTC_ITConfig() function
    430                 - Configure the RTC to generate the RTC WakeUp event using the RTC_WakeUpClockConfig(), 
    431                   RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
    432          
    433          @endverbatim
    434            * @{
    435            */
    436          
    437          /**
    438            * @brief  Enters STOP mode.
    439            *   
    440            * @note   In Stop mode, all I/O pins keep the same state as in Run mode.
    441            * @note   When exiting Stop mode by issuing an interrupt or a wakeup event, 
    442            *         the HSI RC oscillator is selected as system clock.
    443            * @note   When the voltage regulator operates in low power mode, an additional 
    444            *         startup delay is incurred when waking up from Stop mode. 
    445            *         By keeping the internal regulator ON during Stop mode, the consumption 
    446            *         is higher although the startup time is reduced.           
    447            *     
    448            * @param  PWR_Regulator: specifies the regulator state in STOP mode.
    449            *          This parameter can be one of the following values:
    450            *            @arg PWR_Regulator_ON: STOP mode with regulator ON
    451            *            @arg PWR_Regulator_LowPower: STOP mode with regulator in low power mode
    452            * @param  PWR_STOPEntry: specifies if STOP mode in entered with WFI or WFE instruction.
    453            *          This parameter can be one of the following values:
    454            *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
    455            *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
    456            * @retval None
    457            */
    458          void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
    459          {
    460            uint32_t tmpreg = 0;
    461            
    462            /* Check the parameters */
    463            assert(IS_PWR_REGULATOR(PWR_Regulator));
    464            assert(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
    465            
    466            /* Select the regulator state in STOP mode ---------------------------------*/
    467            tmpreg = PWR->CR;
    468            /* Clear PDDS and LPDSR bits */
    469            tmpreg &= CR_DS_MASK;
    470            
    471            /* Set LPDSR bit according to PWR_Regulator value */
    472            tmpreg |= PWR_Regulator;
    473            
    474            /* Store the new value */
    475            PWR->CR = tmpreg;
    476            
    477            /* Set SLEEPDEEP bit of Cortex System Control Register */
    478            SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    479            
    480            /* Select STOP mode entry --------------------------------------------------*/
    481            if(PWR_STOPEntry == PWR_STOPEntry_WFI)
    482            {   
    483              /* Request Wait For Interrupt */
    484              __WFI();
    485            }
    486            else
    487            {
    488              /* Request Wait For Event */
    489              __WFE();
    490            }
    491            /* Reset SLEEPDEEP bit of Cortex System Control Register */
    492            SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
    493          }
    494          
    495          /**
    496            * @brief  Enters STANDBY mode.
    497            * @note   In Standby mode, all I/O pins are high impedance except for:
    498            *          - Reset pad (still available) 
    499            *          - RTC_AF1 pin (PC13) if configured for tamper, time-stamp, RTC 
    500            *            Alarm out, or RTC clock calibration out.
    501            *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
    502            *          - WKUP pin 1 (PA0) if enabled.       
    503            * @param  None
    504            * @retval None
    505            */
    506          void PWR_EnterSTANDBYMode(void)
    507          {
    508            /* Clear Wakeup flag */
    509            PWR->CR |= PWR_CR_CWUF;
    510            
    511            /* Select STANDBY mode */
    512            PWR->CR |= PWR_CR_PDDS;
    513            
    514            /* Set SLEEPDEEP bit of Cortex System Control Register */
    515            SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    516            
    517          /* This option is used to ensure that store operations are completed */
    518          #if defined ( __CC_ARM   )
    519            __force_stores();
    520          #endif
    521            /* Request Wait For Interrupt */
    522            __WFI();
    523          }
    524          
    525          /**
    526            * @}
    527            */
    528          
    529          /** @defgroup PWR_Group7 Flags management functions
    530           *  @brief   Flags management functions 
    531           *
    532          @verbatim   
    533           ===============================================================================
    534                                     Flags management functions
    535           ===============================================================================  
    536          
    537          @endverbatim
    538            * @{
    539            */
    540          
    541          /**
    542            * @brief  Checks whether the specified PWR flag is set or not.
    543            * @param  PWR_FLAG: specifies the flag to check.
    544            *          This parameter can be one of the following values:
    545            *            @arg PWR_FLAG_WU: Wake Up flag. This flag indicates that a wakeup event 
    546            *                  was received from the WKUP pin or from the RTC alarm (Alarm A 
    547            *                  or Alarm B), RTC Tamper event, RTC TimeStamp event or RTC Wakeup.
    548            *                  An additional wakeup event is detected if the WKUP pin is enabled 
    549            *                  (by setting the EWUP bit) when the WKUP pin level is already high.  
    550            *            @arg PWR_FLAG_SB: StandBy flag. This flag indicates that the system was
    551            *                  resumed from StandBy mode.    
    552            *            @arg PWR_FLAG_PVDO: PVD Output. This flag is valid only if PVD is enabled 
    553            *                  by the PWR_PVDCmd() function. The PVD is stopped by Standby mode 
    554            *                  For this reason, this bit is equal to 0 after Standby or reset
    555            *                  until the PVDE bit is set.
    556            *            @arg PWR_FLAG_BRR: Backup regulator ready flag. This bit is not reset 
    557            *                  when the device wakes up from Standby mode or by a system reset 
    558            *                  or power reset.  
    559            * @retval The new state of PWR_FLAG (SET or RESET).
    560            */
    561          FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
    562          {
    563            FlagStatus bitstatus = RESET;
    564            
    565            /* Check the parameters */
    566            assert(IS_PWR_GET_FLAG(PWR_FLAG));
    567            
    568            if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
    569            {
    570              bitstatus = SET;
    571            }
    572            else
    573            {
    574              bitstatus = RESET;
    575            }
    576            /* Return the flag status */
    577            return bitstatus;
    578          }
    579          
    580          /**
    581            * @brief  Clears the PWR's pending flags.
    582            * @param  PWR_FLAG: specifies the flag to clear.
    583            *          This parameter can be one of the following values:
    584            *            @arg PWR_FLAG_WU: Wake Up flag
    585            *            @arg PWR_FLAG_SB: StandBy flag
    586            * @retval None
    587            */
    588          void PWR_ClearFlag(uint32_t PWR_FLAG)
    589          {
    590            /* Check the parameters */
    591            assert(IS_PWR_CLEAR_FLAG(PWR_FLAG));
    592                   
    593            PWR->CR |=  PWR_FLAG << 2;
    594          }
    595          
    596          /**
    597            * @}
    598            */
    599          
    600          /**
    601            * @}
    602            */
    603          
    604          /**
    605            * @}
    606            */
    607          
    608          /**
    609            * @}
    610            */
    611          
    612          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

     Function               .cstack
     --------               -------
     PWR_BackupAccessCmd         8
     PWR_BackupRegulatorCmd      8
     PWR_ClearFlag               8
     PWR_DeInit                  8
     PWR_EnterSTANDBYMode        8
     PWR_EnterSTOPMode          16
     PWR_FlashPowerDownCmd       8
     PWR_GetFlagStatus          16
     PWR_PVDCmd                  8
     PWR_PVDLevelConfig         16
     PWR_WakeUpPinCmd            8
     __WFE                       0
     __WFI                       0


   Section sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     __WFI                                             4
     __WFE                                             4
     PWR_DeInit                                       24
     PWR_BackupAccessCmd                              42
     PWR_PVDLevelConfig                               74
     PWR_PVDCmd                                       42
     PWR_WakeUpPinCmd                                 42
     PWR_BackupRegulatorCmd                           44
     PWR_FlashPowerDownCmd                            44
     PWR_EnterSTOPMode                               126
     PWR_EnterSTANDBYMode                             44
     PWR_GetFlagStatus                                66
     PWR_ClearFlag                                    46
     ??DataTable16                                     4
     ??DataTable16_1                                   4
     ??DataTable16_2                                   4
     ??DataTable16_3                                   4
     ??DataTable16_4                                   4
     ??DataTable16_5                                   4
     ??DataTable16_6                                   4
     ??DataTable16_7                                   4
     ?<Constant "IS_FUNCTIONAL_STATE(N...">           32
     ?<Constant "D:\\work\\\320\320\261\352\262\372  176
     ?<Constant "IS_PWR_PVD_LEVEL(PWR_...">           32
     ?<Constant "IS_PWR_REGULATOR(PWR_...">           32
     ?<Constant "IS_PWR_STOP_ENTRY(PWR...">           36
     ?<Constant "IS_PWR_GET_FLAG(PWR_F...">           28
     ?<Constant "IS_PWR_CLEAR_FLAG(PWR...">           28

 
 998 bytes in section .text
 
 998 bytes of CODE memory

Errors: none
Warnings: none
