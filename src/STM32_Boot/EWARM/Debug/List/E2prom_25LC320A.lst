###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     04/Dec/2013  10:58:05 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\src\E2prom_25LC320A.c                    #
#    Command line =  D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\src\E2prom_25LC320A.c -D STM32F10X_CL    #
#                    -D USE_STDPERIPH_DRIVER -lcN                             #
#                    D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\Debug\List\ -lb                    #
#                    D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\Debug\List\ -o                     #
#                    D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\Debug\Obj\ --no_cse --no_unroll    #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --warnings_are_errors --fpu=None --dlib_config        #
#                    E:\SoftwareInstall\arm\INC\c\DLib_Config_Normal.h -I     #
#                    D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\..\inc\ -I                         #
#                    D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\..\CMSIS\CM3\CoreSupport\ -I       #
#                    D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\..\STM32F2xx_StdPeriph_Driver\inc\ #
#                     -I D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\ #
#                    改进型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_13081 #
#                    5_IAR6.1\STM32_Boot\EWARM\..\CMSIS\CM3\DeviceSupport\ST\ #
#                    STM32F2xx\ -On --use_c++_inline                          #
#    List file    =  D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\Debug\List\E2prom_25LC320A.lst     #
#    Object file  =  D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\Debug\Obj\E2prom_25LC320A.o        #
#                                                                             #
#                                                                             #
###############################################################################

D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IAR6.1\STM32_Boot\src\E2prom_25LC320A.c
      1          /*************************************************************************
      2          *
      3          * Copyright (c) 2013,深圳市伊爱高新技术开发有限公司
      4          * All rights reserved.
      5          *
      6          * 文件名称 : E2prom_25LC320A.c
      7          * 功能     : E2prom_25LC320A_SPI的读写操作.
      8          *
      9          * 当前版本 : 1.0
     10          * 开发者   : Senon Dou
     11          * 修改时间 : 2013.07.26
     12          *
     13          * 历史版本 : 
     14          * 开发者   : 
     15          * 完成时间 : 
     16          * 
     17          * 备注 :    1 - 使用SPI1进行操作，注意EEPROM、FRAM、FLASH共用了SPI1，
     18                          通过片选引脚选择进行操作。
     19          
     20                      2 - 本程序中调用了spi_flash.c的部分函数，包括：
     21                          uint8_t sFLASH_SendByte(uint8_t byte);
     22                          uint8_t sFLASH_ReadByte(void);
     23          
     24                      3 - SPI1的初始化在spi_flash.c中，本程序不再执行初始化操作。
     25          *************************************************************************/
     26          #include "stm32f2xx.h"
     27          #include "stm32f2xx_lib.h"
     28          #include "E2prom_25LC320A.h"
     29          #include "spi_flash.h"
     30          /********************************************************************
     31          * 名称 : E2prom_InitIO
     32          * 功能 : 25LC320A_SPI的GPIO初始化，包括25LC320A_CS、25LC320A_WP。
     33          *
     34          * 输入:   none
     35          * 输出:   none
     36          *
     37          * 全局变量:   none
     38          * 调用函数:  none
     39          *
     40          * 中断资源:  none
     41          *
     42          * 备注:   none
     43          ********************************************************************/
     44          void E2prom_InitIO(void)
     45          { 
     46              GPIO_InitTypeDef  GPIO_InitStructure;
     47            
     48              /* 实用GPIO时钟*/
     49              RCC_AHB1PeriphClockCmd(E2PROM_25LC320A_CS_GPIO_CLK, ENABLE);
     50             
     51              /*!< Configure E2PROM 25LC320A CS pin in output pushpull mode ********************/
     52              GPIO_InitStructure.GPIO_Pin = E2PROM_25LC320A_CS_PIN;
     53              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     54              GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     55              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     56              GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
     57              GPIO_Init(E2PROM_25LC320A_CS_GPIO_PORT, &GPIO_InitStructure);
     58            
     59              RCC_AHB1PeriphClockCmd(MEM_WP_GPIO_CLK, ENABLE);  
     60              /*!< Configure E2PROM 25LC320A wp pin in output pushpull mode ********************/
     61              GPIO_InitStructure.GPIO_Pin = MEM_WP_PIN;
     62              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     63              GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     64              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     65              GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
     66              GPIO_Init(MEM_WP_GPIO_PORT, &GPIO_InitStructure);
     67            
     68              //sFLASH_LowLevel_Init();//初始化SPI1。由于EEPROM、FRAM、FLASH共用SPI1，这里默认SPI1已被初始化
     69            
     70              E2PROM_25LC320A_CS_HIGH();
     71              E2PROM_25LC320A_WP_HIGH();
     72             
     73          }
     74          
     75          /********************************************************************
     76          * 名称 : E2prom_ReadByte
     77          * 功能 : E2PROM_25LC320A读字节操作
     78          *
     79          * 输入: Address 读的起始地址
     80                  *destin 读出数据存放地址指针
     81                  bytenum 读的字节数
     82          * 输出: none
     83          *
     84          * 全局变量:  none
     85          * 调用函数: uint8_t sFLASH_SendByte(uint8_t byte);
     86                      uint8_t sFLASH_ReadByte(void);
     87                      u8 E2prom_ReadStatusRegister();
     88          *
     89          * 中断资源: none
     90          *
     91          * 备注: 
     92          ********************************************************************/
     93          void E2prom_ReadByte(u16 Address, u8 *destin, u8 bytenum)
     94          {
     95              u8 i;
     96              u8 temp;
     97              u8 count = 0;
     98              u8 *p;
     99              u8 addr;
    100            
    101              if(bytenum == 0)
    102                  return;
    103              p = destin;
    104            
    105              //sFLASH_LowLevel_Init(); //初始化SPI1。由于EEPROM、FRAM、FLASH共用SPI1，这里默认SPI1已被初始化
    106              
    107              //检查写标志，等待写完成
    108              while(1)    
    109              {
    110                  count++;
    111                  //读状态寄存器
    112                  temp = E2prom_ReadStatusRegister();
    113                  if(E2PROM_WIP_BIT == (temp &E2PROM_WIP_BIT))//正在写进行中
    114          	    {
    115                      spi_Delay_uS(1000);//1ms，等待
    116                  }
    117                  else
    118                  {
    119                      break;  //跳出
    120                  }
    121                  if(count > 50) //最多等待50ms
    122                  {
    123                      return;  //返回
    124                  }
    125              }
    126              
    127              E2PROM_25LC320A_CS_LOW();
    128                
    129              sFLASH_SendByte(READ);    //发送读命令
    130               
    131              addr = Address >> 8;
    132              sFLASH_SendByte(addr);  //发送地址高字节  
    133              addr = Address;
    134              sFLASH_SendByte(addr);  //发送地址低字节
    135               
    136              for(i = 0; i < bytenum; i++)
    137              {
    138                  *p++ = sFLASH_ReadByte();  //读存储器内容
    139              }
    140              
    141              E2PROM_25LC320A_CS_HIGH();
    142            
    143          }
    144          
    145          /********************************************************************
    146          * 名称 : E2prom_WriteByte
    147          * 功能 : E2PROM_25LC320A写字节操作
    148          *
    149          * 输入: Address 写入的起始地址
    150                  data    写入的数据
    151          * 输出: SUCCESS 成功
    152                  ERROR   失败
    153          *
    154          * 全局变量:  none
    155          * 调用函数: uint8_t sFLASH_SendByte(uint8_t byte);
    156                      uint8_t sFLASH_ReadByte(void);
    157                      u8 E2prom_ReadStatusRegister();
    158          *
    159          * 中断资源: none
    160          *
    161          * 备注:  none
    162          ********************************************************************/
    163          u8 E2prom_WriteByte(u16 Address, u8 data)
    164          {
    165              u8 addr;
    166              u8 temp;
    167              u8 count = 0;
    168          
    169              //sFLASH_LowLevel_Init();//初始化SPI1。由于EEPROM、FRAM、FLASH共用SPI1，这里默认SPI1已被初始化
    170              
    171              //检查写标志，等待写完成
    172              while(1)    
    173              {
    174                  count++;
    175                  //读状态寄存器
    176                  temp = E2prom_ReadStatusRegister();
    177                  if(E2PROM_WIP_BIT == (temp &E2PROM_WIP_BIT))//正在写进行中
    178          	    {
    179                      spi_Delay_uS(1000);//1ms，等待
    180                  }
    181                  else
    182                  {
    183                      break;  //跳出
    184                  }
    185                  if(count > 50) //最多等待50ms
    186                  {
    187                      return ERROR;  //返回
    188                  }
    189              }
    190              
    191              E2PROM_25LC320A_CS_LOW();        
    192              sFLASH_SendByte(WREN);    //写使能命令
    193              E2PROM_25LC320A_CS_HIGH();
    194              
    195              E2PROM_25LC320A_CS_LOW();
    196              
    197              sFLASH_SendByte(WRITE);    //发送写命令
    198              
    199              addr = Address >> 8;
    200              sFLASH_SendByte(addr);  //发送地址高字节
    201              addr = Address;
    202              sFLASH_SendByte(addr);  //发送地址低字节
    203              
    204              sFLASH_SendByte(data); //发送数据，发送完成后 写保护=RESET
    205            
    206              E2PROM_25LC320A_CS_HIGH();
    207          
    208              return SUCCESS;
    209          }
    210          
    211          /********************************************************************
    212          * 名称 : E2prom_ReadStatusRegister(void)
    213          * 功能 : 读状态寄存器
    214          *
    215          * 输入:   none
    216          * 输出: 状态寄存器的值
    217          *
    218          * 全局变量:  none
    219          * 调用函数: uint8_t sFLASH_SendByte(uint8_t byte);
    220                      uint8_t sFLASH_ReadByte(void);
    221          *
    222          * 中断资源: none
    223          *
    224          * 备注:  none
    225          ********************************************************************/
    226          u8 E2prom_ReadStatusRegister(void)
    227          {
    228          	u8	temp;
    229                  
    230              sFLASH_LowLevel_Init();
    231                  
    232          	//拉低片选
    233           	E2PROM_25LC320A_CS_LOW();
    234          
    235          	//发送读状态寄存器命令
    236          	sFLASH_SendByte(RDSR);
    237          
    238          	//读状态寄存器
    239          	temp = sFLASH_ReadByte();
    240          
    241          	//片选拉高
    242          	E2PROM_25LC320A_CS_HIGH();
    243          
    244          	//返回
    245          	return temp;
    246          }
    247          
    248          /********************************************************************
    249          * 名称 : CheckEepromChip(void)
    250          * 功能 : 检查EEPROM芯片工作是否正常
    251          *        eeprom地址的最后两个字节用来做自检用
    252          * 输入:  none
    253          * 输出:  none
    254          *
    255          * 全局变量: E2_LAST_ADDR  E2prom的最后两个字节的地址
    256          * 调用函数: u8 E2prom_WriteByte(u16 Address, u8 data)
    257                      void E2prom_ReadByte(u16 Address, u8 *destin, u8 bytenum)
    258          *
    259          * 中断资源: none
    260          *
    261          * 备注: none
    262          ********************************************************************/
    263          ErrorStatus CheckEepromChip(void)
    264          {
    265          	u8	i;
    266          	u8	ReadBuffer[2] = {0};
    267          	u8	WriteBuffer[2] = {"OK"};
    268          	u16	Address;
    269          	
    270          	Address = E2_LAST_ADDR;   //最后一个字节2*1024 - 2
    271          	for(i=0; i<3; i++)
    272          	{
    273          		//往地址最后两个字节写数据
    274          		E2prom_WriteByte(Address, WriteBuffer[0]);
    275          		E2prom_WriteByte(Address+1, WriteBuffer[1]);
    276                  
    277          		//读出刚写入的字节数
    278          		E2prom_ReadByte(Address,ReadBuffer,2);
    279          		
    280          		//比较写入的内容与读出的内容是否一致
    281          		if((WriteBuffer[0] == ReadBuffer[0])&&(WriteBuffer[1] == ReadBuffer[1]))
    282          		{
    283          		    return SUCCESS;
    284          		}
    285          	}
    286          	
    287          	return ERROR;
    288          }

   Maximum stack usage in bytes:

     Function                  .cstack
     --------                  -------
     CheckEepromChip               16
     E2prom_InitIO                 16
     E2prom_ReadByte               40
     E2prom_ReadStatusRegister      8
     E2prom_WriteByte              24


   Section sizes:

     Function/Label            Bytes
     --------------            -----
     E2prom_InitIO              126
     E2prom_ReadByte            158
     E2prom_WriteByte           160
     E2prom_ReadStatusRegister   52
     CheckEepromChip            110
     ??DataTable5                 4
     ??DataTable5_1               4
     ?<Constant "OK">             2
     ?<Constant {0}>              2

 
   2 bytes in section .rodata
 616 bytes in section .text
 
 616 bytes of CODE  memory
   2 bytes of CONST memory

Errors: none
Warnings: none
