###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     04/Dec/2013  10:58:06 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\src\spi_flash.c                          #
#    Command line =  D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\src\spi_flash.c -D STM32F10X_CL -D       #
#                    USE_STDPERIPH_DRIVER -lcN D:\work\行标产品\改进版一体机\ #
#                    源程序\改进型EGS701-1\改进型EGS701-1\STM32F2xx_Boot_V1.6 #
#                    2\STM32F2xx_Boot_130815_IAR6.1\STM32_Boot\EWARM\Debug\Li #
#                    st\ -lb D:\work\行标产品\改进版一体机\源程序\改进型EGS70 #
#                    1-1\改进型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_1 #
#                    30815_IAR6.1\STM32_Boot\EWARM\Debug\List\ -o             #
#                    D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\Debug\Obj\ --no_cse --no_unroll    #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --warnings_are_errors --fpu=None --dlib_config        #
#                    E:\SoftwareInstall\arm\INC\c\DLib_Config_Normal.h -I     #
#                    D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\..\inc\ -I                         #
#                    D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\..\CMSIS\CM3\CoreSupport\ -I       #
#                    D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\..\STM32F2xx_StdPeriph_Driver\inc\ #
#                     -I D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\ #
#                    改进型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_13081 #
#                    5_IAR6.1\STM32_Boot\EWARM\..\CMSIS\CM3\DeviceSupport\ST\ #
#                    STM32F2xx\ -On --use_c++_inline                          #
#    List file    =  D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\Debug\List\spi_flash.lst           #
#    Object file  =  D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\Debug\Obj\spi_flash.o              #
#                                                                             #
#                                                                             #
###############################################################################

D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IAR6.1\STM32_Boot\src\spi_flash.c
      1          /**
      2            ******************************************************************************
      3            * @file    SPI/SPI_FLASH/spi_flash.c
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    18-April-2011
      7            * @brief   This file provides a set of functions needed to manage the SPI M25Pxxx
      8            *          FLASH memory. 
      9            *            
     10            *          ===================================================================      
     11            *          Notes: 
     12            *           - There is no SPI FLASH memory available in STM322xG-EVAL board,
     13            *             to use this driver you have to build your own hardware.     
     14            *          ===================================================================
     15            *   
     16            *          It implements a high level communication layer for read and write 
     17            *          from/to this memory. The needed STM32 hardware resources (SPI and 
     18            *          GPIO) are defined in spi_flash.h file, and the initialization is 
     19            *          performed in sFLASH_LowLevel_Init() function.
     20            *            
     21            *          You can easily tailor this driver to any development board, by just
     22            *          adapting the defines for hardware resources and sFLASH_LowLevel_Init()
     23            *          function.
     24            *            
     25            *          +-----------------------------------------------------------+
     26            *          |                     Pin assignment                        |
     27            *          +-----------------------------+---------------+-------------+
     28            *          |  STM32 SPI Pins             |     sFLASH    |    Pin      |
     29            *          +-----------------------------+---------------+-------------+
     30            *          | sFLASH_CS_PIN               | ChipSelect(/S)|    1        |
     31            *          | sFLASH_SPI_MISO_PIN / MISO  |   DataOut(Q)  |    2        |
     32            *          |                             |   VCC         |    3 (3.3 V)|
     33            *          |                             |   GND         |    4 (0 V)  |
     34            *          | sFLASH_SPI_MOSI_PIN / MOSI  |   DataIn(D)   |    5        |
     35            *          | sFLASH_SPI_SCK_PIN / SCK    |   Clock(C)    |    6        |
     36            *          |                             |    VCC        |    7 (3.3 V)|
     37            *          |                             |    VCC        |    8 (3.3 V)|  
     38            *          +-----------------------------+---------------+-------------+  
     39            ******************************************************************************
     40            * @attention
     41            *
     42            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     43            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     44            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     45            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     46            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     47            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     48            *
     49            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     50            ******************************************************************************  
     51            */ 
     52          
     53          /* Includes ------------------------------------------------------------------*/
     54          #include "spi_flash.h"
     55          #include "stm32f2xx_gpio.h"
     56          #include "stm32f2xx_spi.h"
     57          #include "stm32f2xx_rcc.h"
     58          
     59          /** @addtogroup STM32F2xx_StdPeriph_Examples
     60            * @{
     61            */
     62          
     63          /** @addtogroup SPI_FLASH
     64            * @{
     65            */  
     66          
     67          /* Private typedef -----------------------------------------------------------*/
     68          /* Private define ------------------------------------------------------------*/
     69          /* Private macro -------------------------------------------------------------*/
     70          /* Private variables ---------------------------------------------------------*/
     71          /* Private function prototypes -----------------------------------------------*/
     72          void sFLASH_LowLevel_DeInit(void);
     73          
     74          /* Private functions ---------------------------------------------------------*/
     75          /*******************************************************************************
     76          * Function Name  : spi_Delay_uS(u32 x)
     77          * Description    : 延时，单位微妙
     78          * Input          : None
     79          * Output         : None
     80          * Return         : None
     81          *******************************************************************************/
     82          void spi_Delay_uS(u32 x)
     83          { u32 i;
     84            for(i = 0; i <= x; i ++);
     85          }
     86          /*******************************************************************************
     87          * Function Name  : SPI_FLASH_AllUnprotect
     88          * Description    : Enables the write access to the FLASH.
     89          * Input          : None
     90          * Output         : None
     91          * Return         : None
     92          *******************************************************************************/
     93          void SPI_FLASH_AllUnprotect(void)
     94          {
     95            u8 statereg = 0x00;
     96          	
     97            /* Enable the write access to the FLASH */
     98            sFLASH_WriteEnable();
     99            /* Select the FLASH: Chip Select low */
    100            sFLASH_CS_LOW();
    101          
    102            /* Send "Unprotect" instruction */
    103            sFLASH_SendByte(sFLASH_CMD_WRSR);
    104            
    105            sFLASH_SendByte(statereg);
    106           
    107            sFLASH_CS_HIGH();
    108            
    109            sFLASH_WaitForWriteEnd();
    110          }
    111          /**
    112            * @brief  DeInitializes the peripherals used by the SPI FLASH driver.
    113            * @param  None
    114            * @retval None
    115            */
    116          void sFLASH_DeInit(void)
    117          {
    118            sFLASH_LowLevel_DeInit();
    119          }
    120          
    121          /**
    122            * @brief  Initializes the peripherals used by the SPI FLASH driver.
    123            * @param  None
    124            * @retval None
    125            */
    126          void sFLASH_Init(void)
    127          {
    128            SPI_InitTypeDef  SPI_InitStructure;
    129          
    130            sFLASH_LowLevel_Init();
    131              
    132            //!< Deselect the FLASH: Chip Select high 
    133            sFLASH_CS_HIGH();
    134            
    135            //!< SPI configuration 
    136            SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
    137            SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
    138            SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
    139            SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
    140            SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
    141            SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
    142            SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
    143          
    144            SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
    145            SPI_InitStructure.SPI_CRCPolynomial = 7;
    146            SPI_Init(sFLASH_SPI, &SPI_InitStructure);
    147            
    148            //!< Enable the sFLASH_SPI  
    149            SPI_Cmd(sFLASH_SPI, ENABLE);
    150            
    151          }
    152          
    153          /**
    154            * @brief  Erases the specified FLASH sector.
    155            * @param  SectorAddr: address of the sector to erase.
    156            * @retval None
    157            */
    158          void sFLASH_EraseSector(uint32_t SectorAddr)
    159          {
    160            SPI_INTERFACE_INIT();
    161            
    162            /*!< Send write enable instruction */
    163            sFLASH_WriteEnable();
    164          
    165            /*!< Sector Erase */
    166            /*!< Select the FLASH: Chip Select low */
    167            sFLASH_CS_LOW();
    168            /*!< Send Sector Erase instruction */
    169            sFLASH_SendByte(sFLASH_CMD_SE);
    170            /*!< Send SectorAddr high nibble address byte */
    171            sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
    172            /*!< Send SectorAddr medium nibble address byte */
    173            sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
    174            /*!< Send SectorAddr low nibble address byte */
    175            sFLASH_SendByte(SectorAddr & 0xFF);
    176            /*!< Deselect the FLASH: Chip Select high */
    177            sFLASH_CS_HIGH();
    178          
    179            /*!< Wait the end of Flash writing */
    180            sFLASH_WaitForWriteEnd();
    181          }
    182          
    183          /**
    184            * @brief  Erases the entire FLASH.
    185            * @param  None
    186            * @retval None
    187            */
    188          void sFLASH_EraseBulk(void)
    189          {
    190            SPI_INTERFACE_INIT();
    191            
    192            /*!< Send write enable instruction */
    193            sFLASH_WriteEnable();
    194          
    195            /*!< Bulk Erase */
    196            /*!< Select the FLASH: Chip Select low */
    197            sFLASH_CS_LOW();
    198            /*!< Send Bulk Erase instruction  */
    199            sFLASH_SendByte(sFLASH_CMD_BE);
    200            /*!< Deselect the FLASH: Chip Select high */
    201            sFLASH_CS_HIGH();
    202          
    203            /*!< Wait the end of Flash writing */
    204            sFLASH_WaitForWriteEnd();
    205          }
    206          
    207          /**
    208            * @brief  Writes more than one byte to the FLASH with a single WRITE cycle 
    209            *         (Page WRITE sequence).
    210            * @note   The number of byte can't exceed the FLASH page size.
    211            * @param  pBuffer: pointer to the buffer  containing the data to be written
    212            *         to the FLASH.
    213            * @param  WriteAddr: FLASH's internal address to write to.
    214            * @param  NumByteToWrite: number of bytes to write to the FLASH, must be equal
    215            *         or less than "sFLASH_PAGESIZE" value.
    216            * @retval None
    217            */
    218          void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
    219          {
    220            SPI_INTERFACE_INIT();
    221            
    222            /*!< Enable the write access to the FLASH */
    223            sFLASH_WriteEnable();
    224          
    225            /*!< Select the FLASH: Chip Select low */
    226            sFLASH_CS_LOW();
    227            /*!< Send "Write to Memory " instruction */
    228            sFLASH_SendByte(sFLASH_CMD_WRITE);
    229            /*!< Send WriteAddr high nibble address byte to write to */
    230            sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
    231            /*!< Send WriteAddr medium nibble address byte to write to */
    232            sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
    233            /*!< Send WriteAddr low nibble address byte to write to */
    234            sFLASH_SendByte(WriteAddr & 0xFF);
    235          
    236            /*!< while there is data to be written on the FLASH */
    237            while (NumByteToWrite--)
    238            {
    239              /*!< Send the current byte */
    240              sFLASH_SendByte(*pBuffer);
    241              /*!< Point on the next byte to be written */
    242              pBuffer++;
    243            }
    244          
    245            /*!< Deselect the FLASH: Chip Select high */
    246            sFLASH_CS_HIGH();
    247          
    248            /*!< Wait the end of Flash writing */
    249            sFLASH_WaitForWriteEnd();
    250          }
    251          
    252          /**
    253            * @brief  Writes block of data to the FLASH. In this function, the number of
    254            *         WRITE cycles are reduced, using Page WRITE sequence.
    255            * @param  pBuffer: pointer to the buffer  containing the data to be written
    256            *         to the FLASH.
    257            * @param  WriteAddr: FLASH's internal address to write to.
    258            * @param  NumByteToWrite: number of bytes to write to the FLASH.
    259            * @retval None
    260            */
    261          void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
    262          {
    263            uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
    264          
    265            Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
    266            count = sFLASH_SPI_PAGESIZE - Addr;
    267            NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
    268            NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
    269            
    270            if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
    271            {
    272              if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
    273              {
    274                sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
    275              }
    276              else /*!< NumByteToWrite > sFLASH_PAGESIZE */
    277              {
    278                while (NumOfPage--)
    279                {
    280                  sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
    281                  WriteAddr +=  sFLASH_SPI_PAGESIZE;
    282                  pBuffer += sFLASH_SPI_PAGESIZE;
    283                }
    284          
    285                sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
    286              }
    287            }
    288            else /*!< WriteAddr is not sFLASH_PAGESIZE aligned  */
    289            {
    290              if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
    291              {
    292                if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
    293                {
    294                  temp = NumOfSingle - count;
    295          
    296                  sFLASH_WritePage(pBuffer, WriteAddr, count);
    297                  WriteAddr +=  count;
    298                  pBuffer += count;
    299          
    300                  sFLASH_WritePage(pBuffer, WriteAddr, temp);
    301                }
    302                else
    303                {
    304                  sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
    305                }
    306              }
    307              else /*!< NumByteToWrite > sFLASH_PAGESIZE */
    308              {
    309                NumByteToWrite -= count;
    310                NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
    311                NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
    312          
    313                sFLASH_WritePage(pBuffer, WriteAddr, count);
    314                WriteAddr +=  count;
    315                pBuffer += count;
    316          
    317                while (NumOfPage--)
    318                {
    319                  sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
    320                  WriteAddr +=  sFLASH_SPI_PAGESIZE;
    321                  pBuffer += sFLASH_SPI_PAGESIZE;
    322                }
    323          
    324                if (NumOfSingle != 0)
    325                {
    326                  sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
    327                }
    328              }
    329            }
    330          }
    331          
    332          /**
    333            * @brief  Reads a block of data from the FLASH.
    334            * @param  pBuffer: pointer to the buffer that receives the data read from the FLASH.
    335            * @param  ReadAddr: FLASH's internal address to read from.
    336            * @param  NumByteToRead: number of bytes to read from the FLASH.
    337            * @retval None
    338            */
    339          void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
    340          {
    341            SPI_INTERFACE_INIT();
    342            
    343            /*!< Select the FLASH: Chip Select low */
    344            sFLASH_CS_LOW();
    345          
    346            /*!< Send "Read from Memory " instruction */
    347            sFLASH_SendByte(sFLASH_CMD_READ);
    348          
    349            /*!< Send ReadAddr high nibble address byte to read from */
    350            sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
    351            /*!< Send ReadAddr medium nibble address byte to read from */
    352            sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
    353            /*!< Send ReadAddr low nibble address byte to read from */
    354            sFLASH_SendByte(ReadAddr & 0xFF);
    355          
    356            while (NumByteToRead--) /*!< while there is data to be read */
    357            {
    358              /*!< Read a byte from the FLASH */
    359              *pBuffer = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
    360              /*!< Point to the next location where the byte read will be saved */
    361              pBuffer++;
    362            }
    363          
    364            /*!< Deselect the FLASH: Chip Select high */
    365            sFLASH_CS_HIGH();
    366          }
    367          
    368          /**
    369            * @brief  Reads FLASH identification.
    370            * @param  None
    371            * @retval FLASH identification
    372            */
    373          uint32_t sFLASH_ReadID(void)
    374          {
    375            uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
    376          
    377            /*!< Select the FLASH: Chip Select low */
    378            sFLASH_CS_LOW();
    379          
    380            /*!< Send "RDID " instruction */
    381            sFLASH_SendByte(0x9F);
    382          
    383            /*!< Read a byte from the FLASH */
    384            Temp0 = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
    385          
    386            /*!< Read a byte from the FLASH */
    387            Temp1 = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
    388          
    389            /*!< Read a byte from the FLASH */
    390            Temp2 = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
    391          
    392            /*!< Deselect the FLASH: Chip Select high */
    393            sFLASH_CS_HIGH();
    394          
    395            Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
    396          
    397            return Temp;
    398          }
    399          
    400          /**
    401            * @brief  Initiates a read data byte (READ) sequence from the Flash.
    402            *   This is done by driving the /CS line low to select the device, then the READ
    403            *   instruction is transmitted followed by 3 bytes address. This function exit
    404            *   and keep the /CS line low, so the Flash still being selected. With this
    405            *   technique the whole content of the Flash is read with a single READ instruction.
    406            * @param  ReadAddr: FLASH's internal address to read from.
    407            * @retval None
    408            */
    409          void sFLASH_StartReadSequence(uint32_t ReadAddr)
    410          {
    411            /*!< Select the FLASH: Chip Select low */
    412            sFLASH_CS_LOW();
    413          
    414            /*!< Send "Read from Memory " instruction */
    415            sFLASH_SendByte(sFLASH_CMD_READ);
    416          
    417            /*!< Send the 24-bit address of the address to read from -------------------*/
    418            /*!< Send ReadAddr high nibble address byte */
    419            sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
    420            /*!< Send ReadAddr medium nibble address byte */
    421            sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
    422            /*!< Send ReadAddr low nibble address byte */
    423            sFLASH_SendByte(ReadAddr & 0xFF);
    424          }
    425          
    426          /**
    427            * @brief  Reads a byte from the SPI Flash.
    428            * @note   This function must be used only if the Start_Read_Sequence function
    429            *         has been previously called.
    430            * @param  None
    431            * @retval Byte Read from the SPI Flash.
    432            */
    433          uint8_t sFLASH_ReadByte(void)
    434          {
    435            return (sFLASH_SendByte(sFLASH_DUMMY_BYTE));
    436          }
    437          
    438          /**
    439            * @brief  Sends a byte through the SPI interface and return the byte received
    440            *         from the SPI bus.
    441            * @param  byte: byte to send.
    442            * @retval The value of the received byte.
    443            */
    444          uint8_t sFLASH_SendByte(uint8_t byte)
    445          {
    446            /*!< Loop while DR register in not emplty */
    447            while (SPI_I2S_GetFlagStatus(sFLASH_SPI, SPI_I2S_FLAG_TXE) == RESET);
    448          
    449            /*!< Send byte through the SPI1 peripheral */
    450            SPI_I2S_SendData(sFLASH_SPI, byte);
    451          
    452            /*!< Wait to receive a byte */
    453            while (SPI_I2S_GetFlagStatus(sFLASH_SPI, SPI_I2S_FLAG_RXNE) == RESET);
    454          
    455            /*!< Return the byte read from the SPI bus */
    456            return SPI_I2S_ReceiveData(sFLASH_SPI);
    457          }
    458          
    459          /**
    460            * @brief  Sends a Half Word through the SPI interface and return the Half Word
    461            *         received from the SPI bus.
    462            * @param  HalfWord: Half Word to send.
    463            * @retval The value of the received Half Word.
    464            */
    465          uint16_t sFLASH_SendHalfWord(uint16_t HalfWord)
    466          {
    467            /*!< Loop while DR register in not emplty */
    468            while (SPI_I2S_GetFlagStatus(sFLASH_SPI, SPI_I2S_FLAG_TXE) == RESET);
    469          
    470            /*!< Send Half Word through the sFLASH peripheral */
    471            SPI_I2S_SendData(sFLASH_SPI, HalfWord);
    472          
    473            /*!< Wait to receive a Half Word */
    474            while (SPI_I2S_GetFlagStatus(sFLASH_SPI, SPI_I2S_FLAG_RXNE) == RESET);
    475          
    476            /*!< Return the Half Word read from the SPI bus */
    477            return SPI_I2S_ReceiveData(sFLASH_SPI);
    478          }
    479          
    480          /**
    481            * @brief  Enables the write access to the FLASH.
    482            * @param  None
    483            * @retval None
    484            */
    485          void sFLASH_WriteEnable(void)
    486          {
    487            /*!< Select the FLASH: Chip Select low */
    488            sFLASH_CS_LOW();
    489          
    490            /*!< Send "Write Enable" instruction */
    491            sFLASH_SendByte(sFLASH_CMD_WREN);
    492          
    493            /*!< Deselect the FLASH: Chip Select high */
    494            sFLASH_CS_HIGH();
    495          }
    496          
    497          /**
    498            * @brief  Polls the status of the Write In Progress (WIP) flag in the FLASH's
    499            *         status register and loop until write opertaion has completed.
    500            * @param  None
    501            * @retval None
    502            */
    503          void sFLASH_WaitForWriteEnd(void)
    504          {
    505            uint8_t flashstatus = 0;
    506          
    507            /*!< Select the FLASH: Chip Select low */
    508            sFLASH_CS_LOW();
    509          
    510            /*!< Send "Read Status Register" instruction */
    511            sFLASH_SendByte(sFLASH_CMD_RDSR);
    512          
    513            /*!< Loop as long as the memory is busy with a write cycle */
    514            do
    515            {
    516              /*!< Send a dummy byte to generate the clock needed by the FLASH
    517              and put the value of the status register in FLASH_Status variable */
    518              flashstatus = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
    519          
    520            }
    521            while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
    522          
    523            /*!< Deselect the FLASH: Chip Select high */
    524            sFLASH_CS_HIGH();
    525          }
    526          
    527          /**
    528            * @brief  Initializes the peripherals used by the SPI FLASH driver.
    529            * @param  None
    530            * @retval None
    531            */
    532          void sFLASH_LowLevel_Init(void)
    533          {
    534            GPIO_InitTypeDef GPIO_InitStructure;
    535          
    536            /*!< Enable the SPI clock */
    537            sFLASH_SPI_CLK_INIT(sFLASH_SPI_CLK, ENABLE);
    538          
    539            /*!< Enable GPIO clocks */
    540            RCC_AHB1PeriphClockCmd(sFLASH_SPI_SCK_GPIO_CLK | sFLASH_SPI_MISO_GPIO_CLK | 
    541                                   sFLASH_SPI_MOSI_GPIO_CLK | sFLASH_CS_GPIO_CLK, ENABLE);
    542            
    543            /*!< SPI pins configuration *************************************************/
    544          
    545            /*!< Connect SPI pins to AF5 */  
    546            GPIO_PinAFConfig(sFLASH_SPI_SCK_GPIO_PORT, sFLASH_SPI_SCK_SOURCE, sFLASH_SPI_SCK_AF);
    547            GPIO_PinAFConfig(sFLASH_SPI_MISO_GPIO_PORT, sFLASH_SPI_MISO_SOURCE, sFLASH_SPI_MISO_AF);
    548            GPIO_PinAFConfig(sFLASH_SPI_MOSI_GPIO_PORT, sFLASH_SPI_MOSI_SOURCE, sFLASH_SPI_MOSI_AF);
    549          
    550            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    551            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
    552            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    553            GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
    554                  
    555            /*!< SPI SCK pin configuration */
    556            GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_SCK_PIN;
    557            GPIO_Init(sFLASH_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
    558          
    559            /*!< SPI MOSI pin configuration */
    560            GPIO_InitStructure.GPIO_Pin =  sFLASH_SPI_MOSI_PIN;
    561            GPIO_Init(sFLASH_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
    562          
    563            /*!< SPI MISO pin configuration */
    564            GPIO_InitStructure.GPIO_Pin =  sFLASH_SPI_MISO_PIN;
    565            GPIO_Init(sFLASH_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
    566          
    567            /*!< Configure sFLASH Card CS pin in output pushpull mode ********************/
    568            GPIO_InitStructure.GPIO_Pin = sFLASH_CS_PIN;
    569            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    570            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    571            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    572            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    573            GPIO_Init(sFLASH_CS_GPIO_PORT, &GPIO_InitStructure);
    574          }
    575          
    576          /**
    577            * @brief  DeInitializes the peripherals used by the SPI FLASH driver.
    578            * @param  None
    579            * @retval None
    580            */
    581          void sFLASH_LowLevel_DeInit(void)
    582          {
    583            GPIO_InitTypeDef GPIO_InitStructure;
    584          
    585            /*!< Disable the sFLASH_SPI  ************************************************/
    586            SPI_Cmd(sFLASH_SPI, DISABLE);
    587            
    588            /*!< DeInitializes the sFLASH_SPI *******************************************/
    589            SPI_I2S_DeInit(sFLASH_SPI);
    590            
    591            /*!< sFLASH_SPI Periph clock disable ****************************************/
    592            sFLASH_SPI_CLK_INIT(sFLASH_SPI_CLK, DISABLE);
    593                
    594            /*!< Configure all pins used by the SPI as input floating *******************/
    595            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    596            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    597          
    598            GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_SCK_PIN;
    599            GPIO_Init(sFLASH_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
    600          
    601            GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MISO_PIN;
    602            GPIO_Init(sFLASH_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
    603          
    604            GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MOSI_PIN;
    605            GPIO_Init(sFLASH_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
    606          
    607            GPIO_InitStructure.GPIO_Pin = sFLASH_CS_PIN;
    608            GPIO_Init(sFLASH_CS_GPIO_PORT, &GPIO_InitStructure);
    609          }
    610          
    611          /**
    612            * @}
    613            */
    614          
    615          /**
    616            * @}
    617            */
    618          
    619          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

     Function                 .cstack
     --------                 -------
     SPI_FLASH_AllUnprotect        8
     sFLASH_DeInit                 8
     sFLASH_EraseBulk              8
     sFLASH_EraseSector            8
     sFLASH_Init                  24
     sFLASH_LowLevel_DeInit       16
     sFLASH_LowLevel_Init         16
     sFLASH_ReadBuffer            16
     sFLASH_ReadByte               8
     sFLASH_ReadID                24
     sFLASH_SendByte               8
     sFLASH_SendHalfWord           8
     sFLASH_StartReadSequence      8
     sFLASH_WaitForWriteEnd        8
     sFLASH_WriteBuffer           40
     sFLASH_WriteEnable            8
     sFLASH_WritePage             16
     spi_Delay_uS                  0


   Section sizes:

     Function/Label           Bytes
     --------------           -----
     spi_Delay_uS               14
     SPI_FLASH_AllUnprotect     60
     sFLASH_DeInit               8
     sFLASH_Init               106
     sFLASH_EraseSector         80
     sFLASH_EraseBulk           54
     sFLASH_WritePage          104
     sFLASH_WriteBuffer        376
     sFLASH_ReadBuffer          94
     sFLASH_ReadID              82
     sFLASH_StartReadSequence   50
     sFLASH_ReadByte            10
     sFLASH_SendByte            50
     sFLASH_SendHalfWord        46
     sFLASH_WriteEnable         38
     sFLASH_WaitForWriteEnd     54
     sFLASH_LowLevel_Init      150
     sFLASH_LowLevel_DeInit     90
     ??DataTable13               4
     ??DataTable13_1             4

 
 1 474 bytes in section .text
 
 1 474 bytes of CODE memory

Errors: none
Warnings: none
