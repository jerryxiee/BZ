###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     04/Dec/2013  10:58:06 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\STM32F2xx_StdPeriph_Driver\src\misc.c    #
#    Command line =  D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\STM32F2xx_StdPeriph_Driver\src\misc.c    #
#                    -D STM32F10X_CL -D USE_STDPERIPH_DRIVER -lcN             #
#                    D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\Debug\List\ -lb                    #
#                    D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\Debug\List\ -o                     #
#                    D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\Debug\Obj\ --no_cse --no_unroll    #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --warnings_are_errors --fpu=None --dlib_config        #
#                    E:\SoftwareInstall\arm\INC\c\DLib_Config_Normal.h -I     #
#                    D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\..\inc\ -I                         #
#                    D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\..\CMSIS\CM3\CoreSupport\ -I       #
#                    D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\..\STM32F2xx_StdPeriph_Driver\inc\ #
#                     -I D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\ #
#                    改进型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_13081 #
#                    5_IAR6.1\STM32_Boot\EWARM\..\CMSIS\CM3\DeviceSupport\ST\ #
#                    STM32F2xx\ -On --use_c++_inline                          #
#    List file    =  D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\Debug\List\misc.lst                #
#    Object file  =  D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\Debug\Obj\misc.o                   #
#                                                                             #
#                                                                             #
###############################################################################

D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IAR6.1\STM32_Boot\STM32F2xx_StdPeriph_Driver\src\misc.c
      1          /**
      2            ******************************************************************************
      3            * @file    misc.c
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    18-April-2011
      7            * @brief   This file provides all the miscellaneous firmware functions (add-on
      8            *          to CMSIS functions).
      9            *          
     10            *  @verbatim   
     11            *                               
     12            *          ===================================================================      
     13            *                        How to configure Interrupts using driver 
     14            *          ===================================================================      
     15            * 
     16            *            This section provide functions allowing to configure the NVIC interrupts (IRQ).
     17            *            The Cortex-M3 exceptions are managed by CMSIS functions.
     18            *
     19            *            1. Configure the NVIC Priority Grouping using NVIC_PriorityGroupConfig()
     20            *                function according to the following table.
     21           
     22            *  The table below gives the allowed values of the pre-emption priority and subpriority according
     23            *  to the Priority Grouping configuration performed by NVIC_PriorityGroupConfig function
     24            *    ==========================================================================================================================
     25            *      NVIC_PriorityGroup   | NVIC_IRQChannelPreemptionPriority | NVIC_IRQChannelSubPriority  |       Description
     26            *    ==========================================================================================================================
     27            *     NVIC_PriorityGroup_0  |                0                  |            0-15             | 0 bits for pre-emption priority
     28            *                           |                                   |                             | 4 bits for subpriority
     29            *    --------------------------------------------------------------------------------------------------------------------------
     30            *     NVIC_PriorityGroup_1  |                0-1                |            0-7              | 1 bits for pre-emption priority
     31            *                           |                                   |                             | 3 bits for subpriority
     32            *    --------------------------------------------------------------------------------------------------------------------------    
     33            *     NVIC_PriorityGroup_2  |                0-3                |            0-3              | 2 bits for pre-emption priority
     34            *                           |                                   |                             | 2 bits for subpriority
     35            *    --------------------------------------------------------------------------------------------------------------------------    
     36            *     NVIC_PriorityGroup_3  |                0-7                |            0-1              | 3 bits for pre-emption priority
     37            *                           |                                   |                             | 1 bits for subpriority
     38            *    --------------------------------------------------------------------------------------------------------------------------    
     39            *     NVIC_PriorityGroup_4  |                0-15               |            0                | 4 bits for pre-emption priority
     40            *                           |                                   |                             | 0 bits for subpriority                       
     41            *    ==========================================================================================================================     
     42            *
     43            *            2. Enable and Configure the priority of the selected IRQ Channels using NVIC_Init()  
     44            *
     45            * @note  When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
     46            *        The pending IRQ priority will be managed only by the subpriority.
     47            *
     48            * @note  IRQ priority order (sorted by highest to lowest priority):
     49            *         - Lowest pre-emption priority
     50            *         - Lowest subpriority
     51            *         - Lowest hardware priority (IRQ number)
     52            *
     53            *  @endverbatim
     54            *
     55            ******************************************************************************
     56            * @attention
     57            *
     58            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     59            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     60            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     61            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     62            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     63            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     64            *
     65            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     66            ******************************************************************************
     67            */
     68          
     69          /* Includes ------------------------------------------------------------------*/
     70          #include "misc.h"
     71          #include "assert.h"
     72          /** @addtogroup STM32F2xx_StdPeriph_Driver
     73            * @{
     74            */
     75          
     76          /** @defgroup MISC 
     77            * @brief MISC driver modules
     78            * @{
     79            */
     80          
     81          /* Private typedef -----------------------------------------------------------*/
     82          /* Private define ------------------------------------------------------------*/
     83          #define AIRCR_VECTKEY_MASK    ((uint32_t)0x05FA0000)
     84          
     85          /* Private macro -------------------------------------------------------------*/
     86          /* Private variables ---------------------------------------------------------*/
     87          /* Private function prototypes -----------------------------------------------*/
     88          /* Private functions ---------------------------------------------------------*/
     89          
     90          /** @defgroup MISC_Private_Functions
     91            * @{
     92            */
     93          
     94          /**
     95            * @brief  Configures the priority grouping: pre-emption priority and subpriority.
     96            * @param  NVIC_PriorityGroup: specifies the priority grouping bits length. 
     97            *   This parameter can be one of the following values:
     98            *     @arg NVIC_PriorityGroup_0: 0 bits for pre-emption priority
     99            *                                4 bits for subpriority
    100            *     @arg NVIC_PriorityGroup_1: 1 bits for pre-emption priority
    101            *                                3 bits for subpriority
    102            *     @arg NVIC_PriorityGroup_2: 2 bits for pre-emption priority
    103            *                                2 bits for subpriority
    104            *     @arg NVIC_PriorityGroup_3: 3 bits for pre-emption priority
    105            *                                1 bits for subpriority
    106            *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
    107            *                                0 bits for subpriority
    108            * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
    109            *         The pending IRQ priority will be managed only by the subpriority. 
    110            * @retval None
    111            */
    112          void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
    113          {
    114            /* Check the parameters */
    115            assert(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
    116            
    117            /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
    118            SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    119          }
    120          
    121          /**
    122            * @brief  Initializes the NVIC peripheral according to the specified
    123            *         parameters in the NVIC_InitStruct.
    124            * @note   To configure interrupts priority correctly, the NVIC_PriorityGroupConfig()
    125            *         function should be called before. 
    126            * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
    127            *         the configuration information for the specified NVIC peripheral.
    128            * @retval None
    129            */
    130          void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
    131          {
    132            uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    133            
    134            /* Check the parameters */
    135            /*
    136            assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
    137            assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
    138            assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    139              */
    140            if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    141            {
    142              /* Compute the Corresponding IRQ Priority --------------------------------*/    
    143              tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    144              tmppre = (0x4 - tmppriority);
    145              tmpsub = tmpsub >> tmppriority;
    146          
    147              tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    148              tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
    149                  
    150              tmppriority = tmppriority << 0x04;
    151                  
    152              NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    153              
    154              /* Enable the Selected IRQ Channels --------------------------------------*/
    155              NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    156                (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    157            }
    158            else
    159            {
    160              /* Disable the Selected IRQ Channels -------------------------------------*/
    161              NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    162                (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    163            }
    164          }
    165          
    166          /**
    167            * @brief  Sets the vector table location and Offset.
    168            * @param  NVIC_VectTab: specifies if the vector table is in RAM or FLASH memory.
    169            *   This parameter can be one of the following values:
    170            *     @arg NVIC_VectTab_RAM: Vector Table in internal SRAM.
    171            *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
    172            * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
    173            * @retval None
    174            */
    175          void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
    176          { 
    177            /* Check the parameters */
    178          	/*
    179            assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
    180            assert_param(IS_NVIC_OFFSET(Offset));
    181          	*/
    182             
    183            SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    184          }
    185          
    186          /**
    187            * @brief  Selects the condition for the system to enter low power mode.
    188            * @param  LowPowerMode: Specifies the new mode for the system to enter low power mode.
    189            *   This parameter can be one of the following values:
    190            *     @arg NVIC_LP_SEVONPEND: Low Power SEV on Pend.
    191            *     @arg NVIC_LP_SLEEPDEEP: Low Power DEEPSLEEP request.
    192            *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
    193            * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
    194            * @retval None
    195            */
    196          void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
    197          {
    198            /* Check the parameters */
    199          	/*
    200            assert_param(IS_NVIC_LP(LowPowerMode));
    201            assert_param(IS_FUNCTIONAL_STATE(NewState)); 
    202          	*/
    203            
    204            if (NewState != DISABLE)
    205            {
    206              SCB->SCR |= LowPowerMode;
    207            }
    208            else
    209            {
    210              SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    211            }
    212          }
    213          
    214          /**
    215            * @brief  Configures the SysTick clock source.
    216            * @param  SysTick_CLKSource: specifies the SysTick clock source.
    217            *   This parameter can be one of the following values:
    218            *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
    219            *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
    220            * @retval None
    221            */
    222          void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
    223          {
    224            /* Check the parameters */
    225            assert(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
    226            if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    227            {
    228              SysTick->CTRL |= SysTick_CLKSource_HCLK;
    229            }
    230            else
    231            {
    232              SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    233            }
    234          }
    235          
    236          /**
    237            * @}
    238            */
    239          
    240          /**
    241            * @}
    242            */
    243          
    244          /**
    245            * @}
    246            */
    247          
    248          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

     Function                 .cstack
     --------                 -------
     NVIC_Init                    16
     NVIC_PriorityGroupConfig      8
     NVIC_SetVectorTable           0
     NVIC_SystemLPConfig           0
     SysTick_CLKSourceConfig       8


   Section sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     NVIC_PriorityGroupConfig                         64
     NVIC_Init                                       106
     NVIC_SetVectorTable                              12
     NVIC_SystemLPConfig                              34
     SysTick_CLKSourceConfig                          64
     ??DataTable7                                      4
     ??DataTable7_1                                    4
     ??DataTable7_2                                    4
     ??DataTable7_3                                    4
     ??DataTable7_4                                    4
     ??DataTable7_5                                    4
     ??DataTable7_6                                    4
     ??DataTable7_7                                    4
     ??DataTable7_8                                    4
     ?<Constant "IS_NVIC_PRIORITY_GROU...">           44
     ?<Constant "D:\\work\\\320\320\261\352\262\372  168
     ?<Constant "IS_SYSTICK_CLK_SOURCE...">           44

 
 572 bytes in section .text
 
 572 bytes of CODE memory

Errors: none
Warnings: none
