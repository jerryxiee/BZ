###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.2.52244/W32 for ARM     04/Dec/2013  10:58:09 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\STM32F2xx_StdPeriph_Driver\src\stm32f2xx #
#                    _dcmi.c                                                  #
#    Command line =  D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\STM32F2xx_StdPeriph_Driver\src\stm32f2xx #
#                    _dcmi.c -D STM32F10X_CL -D USE_STDPERIPH_DRIVER -lcN     #
#                    D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\Debug\List\ -lb                    #
#                    D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\Debug\List\ -o                     #
#                    D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\Debug\Obj\ --no_cse --no_unroll    #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --warnings_are_errors --fpu=None --dlib_config        #
#                    E:\SoftwareInstall\arm\INC\c\DLib_Config_Normal.h -I     #
#                    D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\..\inc\ -I                         #
#                    D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\..\CMSIS\CM3\CoreSupport\ -I       #
#                    D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\..\STM32F2xx_StdPeriph_Driver\inc\ #
#                     -I D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\ #
#                    改进型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_13081 #
#                    5_IAR6.1\STM32_Boot\EWARM\..\CMSIS\CM3\DeviceSupport\ST\ #
#                    STM32F2xx\ -On --use_c++_inline                          #
#    List file    =  D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\Debug\List\stm32f2xx_dcmi.lst      #
#    Object file  =  D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进 #
#                    型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IA #
#                    R6.1\STM32_Boot\EWARM\Debug\Obj\stm32f2xx_dcmi.o         #
#                                                                             #
#                                                                             #
###############################################################################

D:\work\行标产品\改进版一体机\源程序\改进型EGS701-1\改进型EGS701-1\STM32F2xx_Boot_V1.62\STM32F2xx_Boot_130815_IAR6.1\STM32_Boot\STM32F2xx_StdPeriph_Driver\src\stm32f2xx_dcmi.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f2xx_dcmi.c
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    18-April-2011
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionalities of the DCMI peripheral:           
      9            *           - Initialization and Configuration
     10            *           - Image capture functions  
     11            *           - Interrupts and flags management
     12            *
     13            *  @verbatim  
     14            *  
     15            *        
     16            *          ===================================================================
     17            *                                 How to use this driver
     18            *          ===================================================================  
     19            *         
     20            *         The sequence below describes how to use this driver to capture image
     21            *         from a camera module connected to the DCMI Interface.
     22            *         This sequence does not take into account the configuration of the  
     23            *         camera module, which should be made before to configure and enable
     24            *         the DCMI to capture images.
     25            *           
     26            *          1. Enable the clock for the DCMI and associated GPIOs using the following functions:
     27            *                 RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_DCMI, ENABLE);
     28            *                 RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);
     29            *
     30            *          2. DCMI pins configuration 
     31            *             - Connect the involved DCMI pins to AF13 using the following function 
     32            *                 GPIO_PinAFConfig(GPIOx, GPIO_PinSourcex, GPIO_AF_DCMI); 
     33            *             - Configure these DCMI pins in alternate function mode by calling the function
     34            *                 GPIO_Init();
     35            *    
     36            *          3. Declare a DCMI_InitTypeDef structure, for example:
     37            *                 DCMI_InitTypeDef  DCMI_InitStructure;
     38            *             and fill the DCMI_InitStructure variable with the allowed values
     39            *             of the structure member.
     40            *  
     41            *          4. Initialize the DCMI interface by calling the function
     42            *                 DCMI_Init(&DCMI_InitStructure); 
     43            *  
     44            *          5. Configure the DMA2_Stream1 channel1 to transfer Data from DCMI DR
     45            *             register to the destination memory buffer.
     46            *  
     47            *          6. Enable DCMI interface using the function
     48            *                 DCMI_Cmd(ENABLE);
     49            *                 
     50            *         7. Start the image capture using the function
     51            *                 DCMI_CaptureCmd(ENABLE);
     52            *                 
     53            *         8. At this stage the DCMI interface waits for the first start of frame,
     54            *            then a DMA request is generated continuously/once (depending on the
     55            *            mode used, Continuous/Snapshot) to transfer the received data into
     56            *            the destination memory. 
     57            *   
     58            *  @note  If you need to capture only a rectangular window from the received
     59            *         image, you have to use the DCMI_CROPConfig() function to configure 
     60            *         the coordinates and size of the window to be captured, then enable 
     61            *         the Crop feature using DCMI_CROPCmd(ENABLE);  
     62            *         In this case, the Crop configuration should be made before to enable
     63            *         and start the DCMI interface. 
     64            *        
     65            *  @endverbatim   
     66            *  
     67            ******************************************************************************
     68            * @attention
     69            *
     70            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     71            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     72            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     73            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     74            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     75            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     76            *
     77            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     78            ******************************************************************************
     79            */
     80          
     81          /* Includes ------------------------------------------------------------------*/
     82          #include "stm32f2xx_dcmi.h"
     83          #include "stm32f2xx_rcc.h"
     84          #include "assert.h"
     85          /** @addtogroup STM32F2xx_StdPeriph_Driver
     86            * @{
     87            */
     88          
     89          /** @defgroup DCMI 
     90            * @brief DCMI driver modules
     91            * @{
     92            */ 
     93          
     94          /* Private typedef -----------------------------------------------------------*/
     95          /* Private define ------------------------------------------------------------*/
     96          /* Private macro -------------------------------------------------------------*/
     97          /* Private variables ---------------------------------------------------------*/
     98          /* Private function prototypes -----------------------------------------------*/
     99          /* Private functions ---------------------------------------------------------*/
    100          
    101          /** @defgroup DCMI_Private_Functions
    102            * @{
    103            */ 
    104          
    105          /** @defgroup DCMI_Group1 Initialization and Configuration functions
    106           *  @brief   Initialization and Configuration functions 
    107           *
    108          @verbatim   
    109           ===============================================================================
    110                            Initialization and Configuration functions
    111           ===============================================================================  
    112          
    113          @endverbatim
    114            * @{
    115            */
    116          
    117          /**
    118            * @brief  Deinitializes the DCMI registers to their default reset values.
    119            * @param  None
    120            * @retval None
    121            */
    122          void DCMI_DeInit(void)
    123          {
    124            DCMI->CR = 0x0;
    125            DCMI->IER = 0x0;
    126            DCMI->ICR = 0x1F;
    127            DCMI->ESCR = 0x0;
    128            DCMI->ESUR = 0x0;
    129            DCMI->CWSTRTR = 0x0;
    130            DCMI->CWSIZER = 0x0;
    131          }
    132          
    133          /**
    134            * @brief  Initializes the DCMI according to the specified parameters in the DCMI_InitStruct.
    135            * @param  DCMI_InitStruct: pointer to a DCMI_InitTypeDef structure that contains 
    136            *         the configuration information for the DCMI.
    137            * @retval None
    138            */
    139          void DCMI_Init(DCMI_InitTypeDef* DCMI_InitStruct)
    140          {
    141            uint32_t temp = 0x0;
    142            
    143            /* Check the parameters */
    144            /*
    145            assert(IS_DCMI_CAPTURE_MODE(DCMI_InitStruct->DCMI_CaptureMode));
    146            assert(IS_DCMI_SYNCHRO(DCMI_InitStruct->DCMI_SynchroMode));
    147            assert(IS_DCMI_PCKPOLARITY(DCMI_InitStruct->DCMI_PCKPolarity));
    148            assert(IS_DCMI_VSPOLARITY(DCMI_InitStruct->DCMI_VSPolarity));
    149            assert(IS_DCMI_HSPOLARITY(DCMI_InitStruct->DCMI_HSPolarity));
    150            assert(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
    151            assert(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));
    152          */
    153            /* The DCMI configuration registers should be programmed correctly before 
    154            enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
    155            DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
    156             
    157            /* Reset the old DCMI configuration */
    158            temp = DCMI->CR;
    159            
    160            temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
    161                                DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
    162                                DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
    163                            
    164            /* Sets the new configuration of the DCMI peripheral */
    165            temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
    166                               DCMI_InitStruct->DCMI_SynchroMode |
    167                               DCMI_InitStruct->DCMI_PCKPolarity |
    168                               DCMI_InitStruct->DCMI_VSPolarity |
    169                               DCMI_InitStruct->DCMI_HSPolarity |
    170                               DCMI_InitStruct->DCMI_CaptureRate |
    171                               DCMI_InitStruct->DCMI_ExtendedDataMode);
    172          
    173            DCMI->CR = temp;                              
    174          }
    175          
    176          /**
    177            * @brief  Fills each DCMI_InitStruct member with its default value.
    178            * @param  DCMI_InitStruct : pointer to a DCMI_InitTypeDef structure which will
    179            *         be initialized.
    180            * @retval None
    181            */
    182          void DCMI_StructInit(DCMI_InitTypeDef* DCMI_InitStruct)
    183          {
    184            /* Set the default configuration */
    185            DCMI_InitStruct->DCMI_CaptureMode = DCMI_CaptureMode_Continuous;
    186            DCMI_InitStruct->DCMI_SynchroMode = DCMI_SynchroMode_Hardware;
    187            DCMI_InitStruct->DCMI_PCKPolarity = DCMI_PCKPolarity_Falling;
    188            DCMI_InitStruct->DCMI_VSPolarity = DCMI_VSPolarity_Low;
    189            DCMI_InitStruct->DCMI_HSPolarity = DCMI_HSPolarity_Low;
    190            DCMI_InitStruct->DCMI_CaptureRate = DCMI_CaptureRate_All_Frame;
    191            DCMI_InitStruct->DCMI_ExtendedDataMode = DCMI_ExtendedDataMode_8b;
    192          }
    193          
    194          /**
    195            * @brief  Initializes the DCMI peripheral CROP mode according to the specified
    196            *         parameters in the DCMI_CROPInitStruct.
    197            * @note   This function should be called before to enable and start the DCMI interface.   
    198            * @param  DCMI_CROPInitStruct:  pointer to a DCMI_CROPInitTypeDef structure that 
    199            *         contains the configuration information for the DCMI peripheral CROP mode.
    200            * @retval None
    201            */
    202          void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
    203          {  
    204            /* Sets the CROP window coordinates */
    205            DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
    206                            ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));
    207          
    208            /* Sets the CROP window size */
    209            DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
    210                            ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
    211          }
    212          
    213          /**
    214            * @brief  Enables or disables the DCMI Crop feature.
    215            * @note   This function should be called before to enable and start the DCMI interface.
    216            * @param  NewState: new state of the DCMI Crop feature. 
    217            *          This parameter can be: ENABLE or DISABLE.
    218            * @retval None
    219            */
    220          void DCMI_CROPCmd(FunctionalState NewState)
    221          {
    222            /* Check the parameters */
    223            //assert(IS_FUNCTIONAL_STATE(NewState));
    224              
    225            if (NewState != DISABLE)
    226            {
    227              /* Enable the DCMI Crop feature */
    228              DCMI->CR |= (uint32_t)DCMI_CR_CROP;
    229            }
    230            else
    231            {
    232              /* Disable the DCMI Crop feature */
    233              DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
    234            }
    235          }
    236          
    237          /**
    238            * @brief  Sets the embedded synchronization codes
    239            * @param  DCMI_CodesInitTypeDef: pointer to a DCMI_CodesInitTypeDef structure that
    240            *         contains the embedded synchronization codes for the DCMI peripheral.
    241            * @retval None
    242            */
    243          void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
    244          {
    245            DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
    246                                    ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
    247                                    ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
    248                                    ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
    249          }
    250          
    251          /**
    252            * @brief  Enables or disables the DCMI JPEG format.
    253            * @note   The Crop and Embedded Synchronization features cannot be used in this mode.  
    254            * @param  NewState: new state of the DCMI JPEG format. 
    255            *          This parameter can be: ENABLE or DISABLE.
    256            * @retval None
    257            */
    258          void DCMI_JPEGCmd(FunctionalState NewState)
    259          {
    260            /* Check the parameters */
    261            //assert(IS_FUNCTIONAL_STATE(NewState));
    262           
    263            if (NewState != DISABLE)
    264            {
    265              /* Enable the DCMI JPEG format */
    266              DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
    267            }
    268            else
    269            {
    270              /* Disable the DCMI JPEG format */
    271              DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
    272            }
    273          }
    274          /**
    275            * @}
    276            */
    277          
    278          /** @defgroup DCMI_Group2 Image capture functions
    279           *  @brief   Image capture functions
    280           *
    281          @verbatim   
    282           ===============================================================================
    283                                           Image capture functions
    284           ===============================================================================  
    285          
    286          @endverbatim
    287            * @{
    288            */
    289            
    290          /**
    291            * @brief  Enables or disables the DCMI interface.
    292            * @param  NewState: new state of the DCMI interface. 
    293            *          This parameter can be: ENABLE or DISABLE.
    294            * @retval None
    295            */
    296          void DCMI_Cmd(FunctionalState NewState)
    297          {
    298            /* Check the parameters */
    299            //assert(IS_FUNCTIONAL_STATE(NewState));
    300            
    301            if (NewState != DISABLE)
    302            {
    303              /* Enable the DCMI by setting ENABLE bit */
    304              DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
    305            }
    306            else
    307            {
    308              /* Disable the DCMI by clearing ENABLE bit */
    309              DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
    310            }
    311          }
    312          
    313          /**
    314            * @brief  Enables or disables the DCMI Capture.
    315            * @param  NewState: new state of the DCMI capture. 
    316            *          This parameter can be: ENABLE or DISABLE.
    317            * @retval None
    318            */
    319          void DCMI_CaptureCmd(FunctionalState NewState)
    320          {
    321            /* Check the parameters */
    322            //assert(IS_FUNCTIONAL_STATE(NewState));
    323              
    324            if (NewState != DISABLE)
    325            {
    326              /* Enable the DCMI Capture */
    327              DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
    328            }
    329            else
    330            {
    331              /* Disable the DCMI Capture */
    332              DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
    333            }
    334          }
    335          
    336          /**
    337            * @brief  Reads the data stored in the DR register.
    338            * @param  None 
    339            * @retval Data register value
    340            */
    341          uint32_t DCMI_ReadData(void)
    342          {
    343            return DCMI->DR;
    344          }
    345          /**
    346            * @}
    347            */
    348          
    349          /** @defgroup DCMI_Group3 Interrupts and flags management functions
    350           *  @brief   Interrupts and flags management functions
    351           *
    352          @verbatim   
    353           ===============================================================================
    354                            Interrupts and flags management functions
    355           ===============================================================================  
    356          
    357          @endverbatim
    358            * @{
    359            */
    360          
    361          /**
    362            * @brief  Enables or disables the DCMI interface interrupts.
    363            * @param  DCMI_IT: specifies the DCMI interrupt sources to be enabled or disabled. 
    364            *          This parameter can be any combination of the following values:
    365            *            @arg DCMI_IT_FRAME: Frame capture complete interrupt mask
    366            *            @arg DCMI_IT_OVF: Overflow interrupt mask
    367            *            @arg DCMI_IT_ERR: Synchronization error interrupt mask
    368            *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
    369            *            @arg DCMI_IT_LINE: Line interrupt mask
    370            * @param  NewState: new state of the specified DCMI interrupts.
    371            *          This parameter can be: ENABLE or DISABLE.
    372            * @retval None
    373            */
    374          void DCMI_ITConfig(uint16_t DCMI_IT, FunctionalState NewState)
    375          {
    376            /* Check the parameters */
    377            //assert(IS_DCMI_CONFIG_IT(DCMI_IT));
    378            ///assert(IS_FUNCTIONAL_STATE(NewState));
    379            
    380            if (NewState != DISABLE)
    381            {
    382              /* Enable the Interrupt sources */
    383              DCMI->IER |= DCMI_IT;
    384            }
    385            else
    386            {
    387              /* Disable the Interrupt sources */
    388              DCMI->IER &= (uint16_t)(~DCMI_IT);
    389            }  
    390          }
    391          
    392          /**
    393            * @brief  Checks whether the  DCMI interface flag is set or not.
    394            * @param  DCMI_FLAG: specifies the flag to check.
    395            *          This parameter can be one of the following values:
    396            *            @arg DCMI_FLAG_FRAMERI: Frame capture complete Raw flag mask
    397            *            @arg DCMI_FLAG_OVFRI: Overflow Raw flag mask
    398            *            @arg DCMI_FLAG_ERRRI: Synchronization error Raw flag mask
    399            *            @arg DCMI_FLAG_VSYNCRI: VSYNC Raw flag mask
    400            *            @arg DCMI_FLAG_LINERI: Line Raw flag mask
    401            *            @arg DCMI_FLAG_FRAMEMI: Frame capture complete Masked flag mask
    402            *            @arg DCMI_FLAG_OVFMI: Overflow Masked flag mask
    403            *            @arg DCMI_FLAG_ERRMI: Synchronization error Masked flag mask
    404            *            @arg DCMI_FLAG_VSYNCMI: VSYNC Masked flag mask
    405            *            @arg DCMI_FLAG_LINEMI: Line Masked flag mask
    406            *            @arg DCMI_FLAG_HSYNC: HSYNC flag mask
    407            *            @arg DCMI_FLAG_VSYNC: VSYNC flag mask
    408            *            @arg DCMI_FLAG_FNE: Fifo not empty flag mask
    409            * @retval The new state of DCMI_FLAG (SET or RESET).
    410            */
    411          FlagStatus DCMI_GetFlagStatus(uint16_t DCMI_FLAG)
    412          {
    413            FlagStatus bitstatus = RESET;
    414            uint32_t dcmireg, tempreg = 0;
    415          
    416            /* Check the parameters */
    417            //assert(IS_DCMI_GET_FLAG(DCMI_FLAG));
    418            
    419            /* Get the DCMI register index */
    420            dcmireg = (((uint16_t)DCMI_FLAG) >> 12);
    421            
    422            if (dcmireg == 0x01) /* The FLAG is in RISR register */
    423            {
    424              tempreg= DCMI->RISR;
    425            }
    426            else if (dcmireg == 0x02) /* The FLAG is in SR register */
    427            {
    428              tempreg = DCMI->SR;
    429            }
    430            else /* The FLAG is in MISR register */
    431            {
    432              tempreg = DCMI->MISR;
    433            }
    434            
    435            if ((tempreg & DCMI_FLAG) != (uint16_t)RESET )
    436            {
    437              bitstatus = SET;
    438            }
    439            else
    440            {
    441              bitstatus = RESET;
    442            }
    443            /* Return the DCMI_FLAG status */
    444            return  bitstatus;
    445          }
    446          
    447          /**
    448            * @brief  Clears the DCMI's pending flags.
    449            * @param  DCMI_FLAG: specifies the flag to clear.
    450            *          This parameter can be any combination of the following values:
    451            *            @arg DCMI_FLAG_FRAMERI: Frame capture complete Raw flag mask
    452            *            @arg DCMI_FLAG_OVFRI: Overflow Raw flag mask
    453            *            @arg DCMI_FLAG_ERRRI: Synchronization error Raw flag mask
    454            *            @arg DCMI_FLAG_VSYNCRI: VSYNC Raw flag mask
    455            *            @arg DCMI_FLAG_LINERI: Line Raw flag mask
    456            * @retval None
    457            */
    458          void DCMI_ClearFlag(uint16_t DCMI_FLAG)
    459          {
    460            /* Check the parameters */
    461            //assert(IS_DCMI_CLEAR_FLAG(DCMI_FLAG));
    462            
    463            /* Clear the flag by writing in the ICR register 1 in the corresponding 
    464            Flag position*/
    465            
    466            DCMI->ICR = DCMI_FLAG;
    467          }
    468          
    469          /**
    470            * @brief  Checks whether the DCMI interrupt has occurred or not.
    471            * @param  DCMI_IT: specifies the DCMI interrupt source to check.
    472            *          This parameter can be one of the following values:
    473            *            @arg DCMI_IT_FRAME: Frame capture complete interrupt mask
    474            *            @arg DCMI_IT_OVF: Overflow interrupt mask
    475            *            @arg DCMI_IT_ERR: Synchronization error interrupt mask
    476            *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
    477            *            @arg DCMI_IT_LINE: Line interrupt mask
    478            * @retval The new state of DCMI_IT (SET or RESET).
    479            */
    480          ITStatus DCMI_GetITStatus(uint16_t DCMI_IT)
    481          {
    482            ITStatus bitstatus = RESET;
    483            uint32_t itstatus = 0;
    484            
    485            /* Check the parameters */
    486            //assert(IS_DCMI_GET_IT(DCMI_IT));
    487            
    488            itstatus = DCMI->MISR & DCMI_IT; /* Only masked interrupts are checked */
    489            
    490            if ((itstatus != (uint16_t)RESET))
    491            {
    492              bitstatus = SET;
    493            }
    494            else
    495            {
    496              bitstatus = RESET;
    497            }
    498            return bitstatus;
    499          }
    500          
    501          /**
    502            * @brief  Clears the DCMI's interrupt pending bits.
    503            * @param  DCMI_IT: specifies the DCMI interrupt pending bit to clear.
    504            *          This parameter can be any combination of the following values:
    505            *            @arg DCMI_IT_FRAME: Frame capture complete interrupt mask
    506            *            @arg DCMI_IT_OVF: Overflow interrupt mask
    507            *            @arg DCMI_IT_ERR: Synchronization error interrupt mask
    508            *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
    509            *            @arg DCMI_IT_LINE: Line interrupt mask
    510            * @retval None
    511            */
    512          void DCMI_ClearITPendingBit(uint16_t DCMI_IT)
    513          {
    514            /* Clear the interrupt pending Bit by writing in the ICR register 1 in the 
    515            corresponding pending Bit position*/
    516            
    517            DCMI->ICR = DCMI_IT;
    518          }
    519          /**
    520            * @}
    521            */ 
    522          
    523          /**
    524            * @}
    525            */ 
    526          
    527          /**
    528            * @}
    529            */ 
    530          
    531          /**
    532            * @}
    533            */ 
    534          
    535          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

     Function                     .cstack
     --------                     -------
     DCMI_CROPCmd                      0
     DCMI_CROPConfig                   0
     DCMI_CaptureCmd                   0
     DCMI_ClearFlag                    0
     DCMI_ClearITPendingBit            0
     DCMI_Cmd                          0
     DCMI_DeInit                       0
     DCMI_GetFlagStatus                4
     DCMI_GetITStatus                  0
     DCMI_ITConfig                     0
     DCMI_Init                         0
     DCMI_JPEGCmd                      0
     DCMI_ReadData                     0
     DCMI_SetEmbeddedSynchroCodes      0
     DCMI_StructInit                   0


   Section sizes:

     Function/Label               Bytes
     --------------               -----
     DCMI_DeInit                    44
     DCMI_Init                      58
     DCMI_StructInit                30
     DCMI_CROPConfig                26
     DCMI_CROPCmd                   34
     DCMI_SetEmbeddedSynchroCodes   26
     DCMI_JPEGCmd                   34
     DCMI_Cmd                       34
     DCMI_CaptureCmd                34
     DCMI_ReadData                   6
     DCMI_ITConfig                  36
     DCMI_GetFlagStatus             70
     DCMI_ClearFlag                  8
     DCMI_GetITStatus               34
     DCMI_ClearITPendingBit          8
     ??DataTable13                   4
     ??DataTable13_1                 4
     ??DataTable13_2                 4
     ??DataTable13_3                 4
     ??DataTable13_4                 4
     ??DataTable13_5                 4
     ??DataTable13_6                 4
     ??DataTable13_7                 4
     ??DataTable13_8                 4
     ??DataTable13_9                 4
     ??DataTable13_10                4
     ??DataTable13_11                4
     ??DataTable13_12                4

 
 534 bytes in section .text
 
 534 bytes of CODE memory

Errors: none
Warnings: none
